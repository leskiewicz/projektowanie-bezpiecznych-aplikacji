/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package zut.pba.api;

import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;
import zut.pba.models.User;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-06T22:28:45.244316+01:00[Europe/Warsaw]")
@Validated
@Tag(name = "user", description = "Operations related to users")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /user : Create a new user
     * This can only be done by the logged in user.
     *
     * @param xRequestID Unique identifier for the request. (required)
     * @param xDate Request timestamp in ISO 8601 format. (required)
     * @param user Details of the user to be created (required)
     * @return Successfully created the user. (status code 201)
     */
    @Operation(
        operationId = "createUser",
        summary = "Create a new user",
        description = "This can only be done by the logged in user.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Successfully created the user.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> createUser(
        @NotNull @Parameter(name = "X-Request-ID", description = "Unique identifier for the request.", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Request-ID", required = true) String xRequestID,
        @NotNull @Parameter(name = "X-Date", description = "Request timestamp in ISO 8601 format.", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xDate,
        @Parameter(name = "User", description = "Details of the user to be created", required = true) @Valid @RequestBody User user
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"John\", \"lastName\" : \"James\", \"nationality\" : \"PL\", \"pesel\" : 99020541663, \"age\" : 26, \"email\" : \"john@email.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /user/{username} : Delete a user
     * This can only be done by the logged in user.
     *
     * @param username The username of the user to delete (required)
     * @param xRequestID Unique identifier for the request. (required)
     * @param xDate Request timestamp in ISO 8601 format. (required)
     * @return Successfully deleted the user. (status code 204)
     *         or Invalid username supplied (status code 400)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "Delete a user",
        description = "This can only be done by the logged in user.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successfully deleted the user."),
            @ApiResponse(responseCode = "400", description = "Invalid username supplied"),
            @ApiResponse(responseCode = "404", description = "User not found")
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user/{username}"
    )
    default ResponseEntity<Void> deleteUser(
        @Parameter(name = "username", description = "The username of the user to delete", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @NotNull @Parameter(name = "X-Request-ID", description = "Unique identifier for the request.", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Request-ID", required = true) String xRequestID,
        @NotNull @Parameter(name = "X-Date", description = "Request timestamp in ISO 8601 format.", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xDate
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{username} : Get user by user name
     * Get user details by their username
     *
     * @param username The username of the user to delete (required)
     * @param xRequestID Unique identifier for the request. (required)
     * @param xDate Request timestamp in ISO 8601 format. (required)
     * @return Successfully retrieved the user details (status code 200)
     *         or Invalid username supplied (status code 400)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "getUserByName",
        summary = "Get user by user name",
        description = "Get user details by their username",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the user details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid username supplied"),
            @ApiResponse(responseCode = "404", description = "User not found")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{username}",
        produces = { "application/json" }
    )
    default ResponseEntity<User> getUserByName(
        @Parameter(name = "username", description = "The username of the user to delete", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @NotNull @Parameter(name = "X-Request-ID", description = "Unique identifier for the request.", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Request-ID", required = true) String xRequestID,
        @NotNull @Parameter(name = "X-Date", description = "Request timestamp in ISO 8601 format.", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xDate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"John\", \"lastName\" : \"James\", \"nationality\" : \"PL\", \"pesel\" : 99020541663, \"age\" : 26, \"email\" : \"john@email.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /user/{username} : Update a user
     * This can only be done by the logged in user.
     *
     * @param username The username of the user to delete (required)
     * @param xRequestID Unique identifier for the request. (required)
     * @param xDate Request timestamp in ISO 8601 format. (required)
     * @param user Update an existent user in the store (optional)
     * @return Successfully updated the user. (status code 200)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "updateUser",
        summary = "Update a user",
        description = "This can only be done by the logged in user.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully updated the user.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found")
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/user/{username}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> updateUser(
        @Parameter(name = "username", description = "The username of the user to delete", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @NotNull @Parameter(name = "X-Request-ID", description = "Unique identifier for the request.", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Request-ID", required = true) String xRequestID,
        @NotNull @Parameter(name = "X-Date", description = "Request timestamp in ISO 8601 format.", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xDate,
        @Parameter(name = "User", description = "Update an existent user in the store") @Valid @RequestBody(required = false) User user
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"John\", \"lastName\" : \"James\", \"nationality\" : \"PL\", \"pesel\" : 99020541663, \"age\" : 26, \"email\" : \"john@email.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
