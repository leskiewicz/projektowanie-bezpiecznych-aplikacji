/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package zut.pba.api;

import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;
import zut.pba.models.User;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-06T22:28:45.244316+01:00[Europe/Warsaw]")
@Validated
@Tag(name = "user", description = "Operations related to users")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /users : Get all users
     * This can only be done by the logged in user.
     *
     * @param xRequestID Unique identifier for the request. (required)
     * @param xDate Request timestamp in ISO 8601 format. (required)
     * @return Successfully retrieved the list of users. (status code 200)
     */
    @Operation(
        operationId = "getAllUsers",
        summary = "Get all users",
        description = "This can only be done by the logged in user.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the list of users.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    default ResponseEntity<List<User>> getAllUsers(
        @NotNull @Parameter(name = "X-Request-ID", description = "Unique identifier for the request.", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Request-ID", required = true) String xRequestID,
        @NotNull @Parameter(name = "X-Date", description = "Request timestamp in ISO 8601 format.", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xDate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"firstName\" : \"John\", \"lastName\" : \"James\", \"nationality\" : \"PL\", \"pesel\" : 99020541663, \"age\" : 26, \"email\" : \"john@email.com\" }, { \"firstName\" : \"John\", \"lastName\" : \"James\", \"nationality\" : \"PL\", \"pesel\" : 99020541663, \"age\" : 26, \"email\" : \"john@email.com\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
